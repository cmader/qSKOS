= qSKOS

qSKOS is a tool for finding {quality issues}[https://github.com/cmader/qSKOS/wiki/Quality-Issues] in SKOS vocabularies. It can be used as command line tool or API.

== Requirements

* Verify that Java v.1.6 or greater is installed: <tt>javac -version</tt>
* Make sure Maven v.3.0 or greater is installed: <tt>mvn -v</tt>

== Building qSKOS

* Clone the project: <tt>git clone git@github.com:cmader/qSKOS.git</tt>
* Change into the newly created +qSKOS+ directory and build the application: <tt>mvn clean package</tt>, wait for tests and build to complete.
* Two jar files are now located in the +qSKOS+ directory:
  * <tt>evaluate.jar</tt>: The _executable_ jar file that can directly be used for vocabulary evaluation
  * <tt>qSKOS-[version].jar</tt>: The library to integrate qSKOS' functionality into other applications

== Using the qSKOS command line tool

=== General Usage

* Run the tool using <tt>java -jar evaluate.jar</tt>
* A synopsis on the application's parameters is displayed.

=== Examples

The following examples demonstrate typical +qSKOS+ use cases. For demonstration purposes we use the +IPSV+ vocabulary available from the {qSKOS-data}[https://github.com/cmader/qSKOS-data] repository: {Download IPSV vocabulary}[https://github.com/cmader/qSKOS-data/raw/master/IPSV/ipsv_skos.rdf.bz2]. In the examples below we assume that the vocabulary file is placed in the same directory than +evaluate.jar+ file.

1) Retrieving basic vocabulary statistics
---
Basic statistical properties (e.g., number of concepts, semantic relations or concept schemes) can be retrieved by issuing the command:

<tt>java -jar evaluate.jar summarize ipsv_skos.rdf</tt>

2) Finding quality issues
---
To perform a complete analysis of all quality issues, use the following command:

<tt>java -jar evaluate.jar analyze ipsv_skos.rdf</tt>

Please keep in mind that a full analysis can take quite some time, depending on the vocabulary size and structure. Especially in/outlink checking can take up to a couple of hours, so it is often useful to analyze only a subset of all issues. In the following examples you'll learn how this can be done.

3) Output a list of *supported* statistical properties and quality issues
---
By starting the evaluation using either the +summarize+ or +analyze+ command and omitting the vocabulary filename, you get an overview about the supported statistical properties and quality issues:

<tt>java -jar evaluate.jar summarize</tt>

or

<tt>java -jar evaluate.jar analyze</tt>

Here's an excerpt from the output:
<tt>
---
ID: apc
Name: Ambiguously Preflabeled Concepts
Description: Finds concepts with more then one prefLabel per language
---
</tt>

Every property/issue is identified by an ID string, has a name and a description. For more detailed information on the quality issues see the +qSKOS+ {wiki page}[https://github.com/cmader/qSKOS/wiki/Quality-Issues].

4) Testing for *specific* issues
---
Specific issues can be tested by passing the <tt>-c</tt> parameter followed by one or more (comma-separated) issue IDs (see example above). Keep in mind, that the <tt>-c</tt> parameter has to be placed between between the +analyze+ command and the vocabulary file like this:

<tt>java -jar evaluate.jar analyze -c lc,apc ipsv_skos.rdf</tt>

The command above triggers analysis of the "Label Conflicts" and "Ambiguously Preflabeled Concepts" issues.

5) Useful command line switches
---

* In most cases it is not sufficient to know about the presence and number of quality issues but also which resource cause these potential problems. This can be reported by using the <tt>-e</tt> (extensive) command line switch.

  For example, the command <tt>java -jar evaluate.jar analyze -c usr ipsv_skos.rdf</tt> reports one "Undefined SKOS Resources". Issuing the command <tt>java -jar evaluate.jar analyze -e -c usr ipsv_skos.rdf</tt> (mind the additional <tt>-e</tt> parameter after the +analyze+ command) reports the resource (<tt>http://www.w3.org/2004/02/skos/core#prefSymbol</tt>) causing a potential problem.

* Output of the progress percentage is useful for interactive use of +qSKOS+. However it can be distracting when concise quality issue reports should be generated. The <tt>-q</tt> (quiet) command line switch suppresses of any additional information at processing time.

  The command <tt>java -jar evaluate.jar summarize -c ac ipsv_skos.rdf</tt> reports all authoritative conceps in the vocabulary. However, it also produces progress output and information about what concept URIs are considered authoritative. Using <tt>java -jar evaluate.jar summarize -q -c ac ipsv_skos.rdf</tt> (mind the additional <tt>-q</tt> parameter) only outputs the report results.

=== FAQ

* What are "authoritative concepts"?

* How can I write the report to a file?

* What version of qSKOS do I use?

== Using the qSKOS API

The +QSkos+ class serves as facade for calculating all criteria. For each criterion it provides a corresponding public method. Please read the Javadoc for further infos. Here is an example:

  // instantiation
  qskos = new QSkos(new File("stw.rdf"));
  qskos.setAuthoritativeResourceIdentifier("zbw.eu");

  // the fun part
  qskos.findComponents();
  qskos.findValuelessAssociativeRelations();

== Citation

== Contributors

* Christian Mader ({@cmader}[https://github.com/cmader])
* Bernhard Haslhofer ({@behas}[https://github.com/behas])

How can I contribute?

* Fork, add and/or improve, and send merge requests
* File issues and/or feature requests

== Copyright

Copyright (c) 2011, 2012 Christian Mader. See LICENSE.html for details
