= qSKOS

qSKOS is a tool for finding {quality issues}[https://github.com/cmader/qSKOS/wiki/Quality-Issues] in SKOS vocabularies. It can be used as command line tool or API. For release information please see the {changelog}[https://github.com/cmader/qSKOS/blob/devel/CHANGELOG.rdoc].

Currently we work on integrating qSKOS into the {PoolParty Thesaurus Server}[http://www.poolparty.biz], a commercially available Web-based development tool for SKOS vocabularies. In it's final stage we combine qSKOS' scientifically-grounded quality checks with the easy-to-use graphical interface of the PoolParty software. Integrated in the development workflow, quality checks can work as an assistive technology, just like syntax-checkers in development environments or spell-checkers in word processing applications.

== Installation

=== Use the latest released version

You can find the released versions on the {qSKOS GitHub page}[https://github.com/cmader/qSKOS/releases] and download the latest .jar file, e.g. for {qSKOS Version 1.0}[https://github.com/cmader/qSKOS/releases/download/1.0/qSKOS-cmd.jar].
Alternatively you can

=== Build from Source

Requirements:
* Verify that Java v.1.7 or greater is installed: <tt>javac -version</tt>
* Make sure Maven v.3.0 or greater is installed: <tt>mvn -v</tt>
* Make sure you have the current version of the {git version control system}[http://git-scm.com/] installed on your system

=== 1) Get the source code

You have two options:
* Clone the project (<tt>git clone https://github.com/cmader/qSKOS.git</tt>) to your system using git.
* Download the latest {release}[https://github.com/cmader/qSKOS/releases] of the project and extract it to a properly named directory, e.g., +qSKOS+.

=== 2) Build the tool

* Change into the newly created +qSKOS+ directory and build the application: <tt>mvn clean package</tt>. Wait for tests and build to complete.
* Two jar files are now located in the +qSKOS/target+ directory:
  * <tt>qSKOS-cmd.jar</tt>: The *executable* jar file that can directly be used for vocabulary evaluation
  * <tt>qSKOS-[version].jar</tt>: The library to integrate qSKOS' functionality into other applications

== Using the qSKOS command line tool

=== General Usage

* Change to the +qSKOS/target+ directory
* Run the tool using <tt>java -jar qSKOS-cmd.jar</tt>
* A synopsis on the application's parameters is displayed.

=== Examples

The following examples demonstrate typical qSKOS use cases. For demonstration purposes we use the IPSV vocabulary available from the {qSKOS-data}[https://github.com/cmader/qSKOS-data] repository: {Download IPSV vocabulary}[https://github.com/cmader/qSKOS-data/raw/master/IPSV/ipsv_skos.rdf.bz2]. In the examples below we assume that the vocabulary file is placed in the same directory than the +qSKOS-cmd.jar+ file.

==== 1) Retrieving basic vocabulary statistics
Basic statistical properties (e.g., number of concepts, semantic relations or concept schemes) can be retrieved and stored into the file +report.txt+ by issuing the command:

<tt>java -jar qSKOS-cmd.jar summarize ipsv_skos.rdf -o report.txt</tt>

==== 2) Finding quality issues
To perform an analysis for quality issues, use the following command:

<tt>java -jar qSKOS-cmd.jar analyze -dc mil,bl ipsv_skos.rdf -o report.txt</tt>

Please keep in mind that a full analysis can take quite some time, depending on the vocabulary size and structure. Especially link checking sometimes can take hours, so it is often useful to analyze only a subset of all issues. In the following examples you'll learn how this can be done. In the example above, checking for missing inlinks and broken links has been disabled to speed up the checking process (using the parameter <tt>-dc mil,bl</tt>).

==== 3) Output a list of *supported* statistical properties and quality issues
By starting the evaluation using either the +summarize+ or +analyze+ command and omitting the vocabulary filename, you get an overview about the supported statistical properties and quality issues:

<tt>java -jar qSKOS-cmd.jar summarize</tt>

or

<tt>java -jar qSKOS-cmd.jar analyze</tt>

Here's an excerpt from the output:

  ID: chr
  Name: Cyclic Hierarchical Relations
  Description: Finds all hierarchy cycle containing components

Every property/issue is identified by an ID string, has a name and a description. For more detailed information on the quality issues see the qSKOS {wiki page}[https://github.com/cmader/qSKOS/wiki/Quality-Issues].

==== 4) Testing for a specific issue or a subset of issues
Specific issues can be tested by passing the <tt>-c</tt> parameter followed by one or more (comma-separated) issue IDs (see example above). Keep in mind, that the <tt>-c</tt> parameter has to be placed between between the +analyze+ command and the vocabulary file like this:

<tt>java -jar qSKOS-cmd.jar analyze -c ol,oc ipsv_skos.rdf -o report.txt</tt>

The command above triggers analysis of the "Overlapping Labels" and "Orphan Concepts" issues. In a very similar way it is possible to explicitly *exclude* issues from testing. For example, the command

<tt>java -jar qSKOS-cmd.jar analyze -dc mil ipsv_skos.rdf -o report.txt </tt>

checks for all issues except "Missing In-Links".

== FAQ

=== What are "Authoritative Concepts"?
Every concept in a SKOS vocabulary is a resource and should be identified by an URI to be referenced from other vocabularies on the Web. However, when using qSKOS, for some issues it is required to distinguish between concepts that are originally specified (authoritative) in the vocabulary that's about to be analyzed, and concepts (implictly or explicitly) defined in other vocabularies somewhere on the Web. 

qSKOS is to some extent able to perform this distinction by examining the host part of the concept's URIs. Depending on the vocabulary's structure in some cases it might be needed to pass an "Authoritative resource identifier" (command line argument <tt>-a</tt>) to qSKOS. This is a substring of an URI that identifies a concept as authoritative.

=== What version of qSKOS do I use?
Simply pass the command line switch <tt>-v</tt> like this:

<tt>java -jar qSKOS-cmd.jar -v</tt>

The version will be printed in the first line of the output, directly before the usage information.

== Using the qSKOS API

The +QSkos+ class serves as facade for calculating all criteria. For each criterion it provides a corresponding public method. Please read the Javadoc for further infos. Here is an example:

  // instantiation
  qskos = new QSkos(new File("stw.rdf"));
  qskos.setAuthResourceIdentifier("zbw.eu");

  // the fun part
  Issue orphanConcepts = qSkos.getIssues("oc").iterator().next();
  long numberOfOrphans = issue.getResult().occurrenceCount());

== Publications
A subset of the quality issues qSKOS supports (including an analysis of several existing vocabularies) have been published in our paper {Finding Quality Issues in SKOS Vocabularies}[http://arxiv.org/abs/1206.1339v1].


  @inproceedings{cs3444,
       booktitle = {TPDL 2012 Therory and Practice of Digital Libraries},
           month = {May},
           title = {Finding Quality Issues in SKOS Vocabularies},
          author = {Christian Mader and Bernhard Haslhofer and Antoine Isaac},
         address = {Germany},
            year = {2012},
             url = {http://arxiv.org/pdf/1206.1339v1},
        abstract = {The Simple Knowledge Organization System (SKOS) is a standard model for controlled vocabularies on the Web. However, SKOS   vocabularies often differ in terms of quality, which reduces their applicability across system boundaries. Here we investigate how we can support taxonomists in improving SKOS vocabularies by pointing out quality issues that go beyond the integrity constraints defined in the SKOS specification. We identified potential quality issues and formalized them into computable quality checking functions that can find affected resources in a given SKOS vocabulary. We implemented these functions in the qSKOS quality assessment tool, analyzed 15 existing vocabularies, and found possible quality issues in all of them.}
  }

We performed a survey among experts in the field of vocabulary development in order to get feedback about the quality issues checked by qSKOS. The paper {Perception and Relevance of Quality Issues in Web Vocabularies}[http://eprints.cs.univie.ac.at/3720/1/iSemantics2013-cr_version-mader-haslhofer.pdf] reports on a subset of these issues. It furthermore sets them into relation to common usage scenarios for controlled vocabularies on the Web. 


  @inproceedings{cs3720,
       booktitle = {I-SEMANTICS 2013},
           title = {Perception and Relevance of Quality Issues in Web Vocabularies},
          author = {Christian Mader and Bernhard Haslhofer},
         address = {Graz, AUT},
            year = {2013},
             url = {http://eprints.cs.univie.ac.at/3720/},
        abstract = {Web vocabularies provide organization and orientation in information environments and can facilitate resource discovery and retrieval. Several tools have been developed that support quality assessment for the increasing amount of vocabularies expressed in SKOS and published as Linked Data. However, these tools do not yet take into account the users' perception of vocabulary quality. In this paper, we report the findings from an online survey conducted among experts in the field of vocabulary development to study the perception and relevance of vocabulary quality issues in the context of real-world application scenarios. Our results indicate that structural and labeling issues are the most relevant ones. We also derived design recommendations for vocabulary quality checking tools.}
  }

Presentation slides are available for the {I-SEMANTICS 2013 talk}[https://docs.google.com/presentation/d/1QMprChHRNbci_4wcbccm6Z9pTsXCvbkboGw5aldReYI/edit?usp=sharing] as well as for my {ISKO 2013 presentation}[https://docs.google.com/file/d/0BzYMwvL-nDZ1NG1ZekJrZ3dPN0E/edit?usp=sharing].

== Contributors

* Christian Mader ({@cmader}[https://github.com/cmader])
* Bernhard Haslhofer ({@behas}[https://github.com/behas])
* Antoine Isaac ({@aisaac}[https://github.com/aisaac])

=== How can I contribute?

* Fork, add and/or improve, and send merge requests
* File issues and/or feature requests

== Copyright

Copyright (c) 2011, 2012, 2013 Christian Mader. See LICENSE.txt for details
